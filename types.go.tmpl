{{define "types"}}
{{- $type := .TypeDict -}}

{{if .Messages}}
//
// Types
//

{{range .Messages}}
  {{if .Type | isEnum}}
    {{$enumName := .Name}}
    {{$enumType := .EnumType}}
    type {{$enumName}} {{$enumType}}

    const (
      {{- range .Fields}}
        {{$enumName}}_{{.Name}} {{$enumName}} = {{.Value}}
      {{- end}}
    )

    var {{$enumName}}_name = map[{{$enumType}}]string {
      {{- range .Fields}}
        {{.Value}}: "{{.Name}}",
      {{- end}}
    }

    var {{$enumName}}_value = map[string]{{$enumType}} {
      {{- range .Fields}}
        "{{.Name}}": {{.Value}},
      {{- end}}
    }

    func (x {{$enumName}}) String() string {
      return {{$enumName}}_name[{{$enumType}}(x)]
    }

    func (x {{$enumName}}) MarshalJSON() ([]byte, error) {
      buf := bytes.NewBufferString(`"`)
      buf.WriteString({{$enumName}}_name[{{$enumType}}(x)])
      buf.WriteString(`"`)
      return buf.Bytes(), nil
    }

    func (x *{{$enumName}}) UnmarshalJSON(b []byte) error {
      var j string
      err := json.Unmarshal(b, &j)
      if err != nil {
        return err
      }
      *x = {{$enumName}}({{$enumName}}_value[j])
      return nil
    }
  {{end}}
  {{if .Type | isStruct  }}
    type {{.Name}} struct {
      {{- range $_, $field := .Fields -}}
        {{- $fieldName := $field.Name | pascalCase -}}
        {{- $jsonName := $field.Name | camelCase }}
        {{- $dbName := "" }}
        {{- range $meta := $field.Meta -}}          
          {{- if exists $meta "go.field.name" -}}
            {{- $fieldName = get $meta "go.field.name" -}}
          {{- end -}}
          {{- if exists $meta "json" -}}
            {{- $jsonName = get $meta "json" -}}
          {{- end -}}
          {{- if exists $meta "go.tag.json" -}}
            {{- $jsonName = get $meta "go.tag.json" -}}
          {{- end -}}
          {{- if exists $meta "go.tag.db" -}}
            {{- $dbName = get $meta "go.tag.db" -}}
          {{- end -}}
        {{- end -}}
        {{- $jsonTags := printf "json:%q" $jsonName -}}
        {{- $dbTags := "" -}}
        {{if $dbName}}
          {{- $dbTags = printf " db:%q" $dbName -}}
        {{- end}}
        {{$fieldName}} {{if and $field.Optional (isBaseType $field.Type)}}*{{end}}{{template "type" dict "Type" $field.Type "TypeDict" $type}} `{{$jsonTags}}{{$dbTags}}`
      {{- end}}
    }
  {{end}}
{{end}}
{{end}}
{{if .Services}}
  {{range .Services}}
    type {{.Name}} interface {
      {{range $_, $method := .Methods}}
        {{.Name}}(ctx context.Context{{range $_, $input := .Inputs}}, {{$input.Name}} {{template "type" dict "Type" $input.Type "TypeDict" $type}}{{end}}) ({{range $i, $output := .Outputs}}{{template "type" dict "Type" $output.Type "TypeDict" $type}}{{if lt $i (len $method.Outputs)}}, {{end}}{{end}}error)
      {{- end}}
    }
  {{end}}
  var WebRPCServices = map[string][]string{
    {{- range .Services}}
      "{{.Name}}": {
        {{- range .Methods}}
          "{{.Name}}",
        {{- end}}
      },
    {{- end}}
  }
{{end}}

{{end}}
